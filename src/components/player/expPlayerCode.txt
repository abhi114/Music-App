Code Analysis and Explanation
1. Animated State Management
tsx
Copy code
const { translationY } = useSharedState();
const isExpanded = useSharedValue(false);
const isScroll = useSharedValue(false);
const scrollRef = useRef<Animated.ScrollView>(null);
translationY: Tracks the vertical position of the player, allowing it to animate between collapsed and expanded states.
isExpanded: Boolean flag to track whether the player is fully expanded.
isScroll: Boolean flag to control whether the playerâ€™s scrollable content is scrollable or if gestures should be handled by the parent gesture handler.
scrollRef: A reference to the ScrollView for programmatically controlling its behavior.
2. useEffect for Initialization
tsx
Copy code
useEffect(() => {
    translationY.value = withTiming(0, { duration: 0 });
}, [translationY]);
Sets the initial position of the player to the collapsed state (translationY = 0) without animation on mount.
3. Scroll Behavior (onScroll)
tsx
Copy code
const onScroll = useAnimatedScrollHandler({
    onBeginDrag({ contentOffset }) {
        if (contentOffset.y === 0) {
            isScroll.value = false;
        }
    },
    onEndDrag({ contentOffset }) {
        if (contentOffset.y === 0) {
            isScroll.value = false;
        }
    },
    onMomentumEnd({ contentOffset }) {
        if (contentOffset.y === 0) {
            isScroll.value = false;
        }
    },
});
Handles scroll events within the player's ScrollView.
If the user scrolls to the top of the ScrollView (i.e., contentOffset.y === 0):
Disables scrolling (isScroll.value = false).
Enables gesture handling to allow expanding the player further.
4. Pan Gesture
tsx
Copy code
const panGesture = Gesture.Pan()
    .onChange(() => {
        if (translationY.value <= -602) {
            isScroll.value = true;
        }
    })
    .onUpdate((event) => {
        translationY.value = Math.max(
            Math.min(event.translationY + (isExpanded.value ? -MAX_PLAYER_HEIGHT + MIN_PLAYER_HEIGHT : 0), 0),
            -MAX_PLAYER_HEIGHT + MIN_PLAYER_HEIGHT
        );
    })
    .onEnd((event) => {
        if (event?.translationY < -MIN_PLAYER_HEIGHT / 2) {
            isExpanded.value = true;
            translationY.value = withTiming(-MAX_PLAYER_HEIGHT + MIN_PLAYER_HEIGHT, { duration: 300 });
        } else {
            isExpanded.value = false;
            translationY.value = withTiming(0, { duration: 300 });
        }
    })
    .enabled(!isScroll.value);
onChange: Enables scroll (isScroll.value = true) if the player is already fully expanded.
onUpdate: Updates the vertical position (translationY.value) dynamically as the user drags the player.
Restricts movement between the collapsed and expanded limits (MAX_PLAYER_HEIGHT and MIN_PLAYER_HEIGHT).
onEnd:
If the user drags past a threshold (-MIN_PLAYER_HEIGHT / 2), fully expands the player.
Otherwise, collapses the player.
.enabled: The gesture is enabled only if scrolling is disabled (!isScroll.value).
5. Animated Styles
Player Container Style
tsx
Copy code
const animatedContainerStyle = useAnimatedStyle(() => {
    const height = interpolate(
        translationY.value,
        [-MAX_PLAYER_HEIGHT + MIN_PLAYER_HEIGHT, 0],
        [MAX_PLAYER_HEIGHT, MIN_PLAYER_HEIGHT],
        "clamp"
    );
    return {
        height,
        borderTopLeftRadius: translationY.value < -2 ? 15 : 0,
        borderTopRightRadius: translationY.value < -2 ? 15 : 0,
    };
});
Adjusts the player's height and border radius based on translationY.value.
Uses interpolate to map the translationY range to height values.
Collapsed Player Style
tsx
Copy code
const collapsedOpacityStyle = useAnimatedStyle(() => {
    const opacity = interpolate(translationY.value, [-2, 0], [0, 1], "clamp");
    return {
        opacity,
        display: translationY.value < -2 ? "none" : "flex",
    };
});
Sets the opacity and visibility of the collapsed player.
Visible only when the player is collapsed.
Expanded Player Style
tsx
Copy code
const expandedOpacityStyle = useAnimatedStyle(() => {
    const opacity = interpolate(translationY.value, [-2, 0], [1, 0], "clamp");
    return {
        opacity,
        display: translationY.value > -2 ? "none" : "flex",
    };
});
Similar to collapsedOpacityStyle but applies to the expanded player.
Visible only when the player is expanded.
6. Combined Gesture
tsx
Copy code
const combinedGesture = Gesture.Simultaneous(panGesture, Gesture.Native());
Combines the custom panGesture with native gestures, allowing simultaneous gesture handling.
7. Main Component Layout
tsx
Copy code
<View style={styles.container}>
    <WrappedComponent {...props} />
    <GestureDetector gesture={combinedGesture}>
        <Animated.View style={[styles.playerContainer, animatedContainerStyle]}>
            {Platform.OS === 'ios' ? (
                <Animated.ScrollView
                    ref={scrollRef}
                    style={expandedOpacityStyle}
                    onScroll={onScroll}
                    contentContainerStyle={styles.expandedPlayer}
                >
                    <FullScreenPlayer />
                </Animated.ScrollView>
            ) : (
                <Animated.ScrollView style={expandedOpacityStyle}>
                    <ScrollView
                        nestedScrollEnabled
                        contentContainerStyle={styles.expandedPlayer}
                    >
                        <FullScreenPlayer />
                    </ScrollView>
                </Animated.ScrollView>
            )}
            <Animated.View style={[styles.collapsedPlayer, collapsedOpacityStyle]}>
                <AirPlayer />
            </Animated.View>
        </Animated.View>
    </GestureDetector>
</View>
WrappedComponent:
The main content rendered alongside the player.
GestureDetector:
Wraps the player UI, applying the combinedGesture logic.
Player UI:
Includes both the expanded and collapsed views.
Uses Animated.ScrollView for smooth scrolling and animation handling.
Platform-specific logic ensures compatibility with both iOS and Android.
Summary: How It Works
The WrappedComponent renders the main app content.
The player starts in a collapsed state (translationY = 0).
Gestures:
Dragging up/down triggers panGesture, transitioning the player between collapsed and expanded states.
If the player is expanded, ScrollView enables vertical scrolling within the player content.
Animation:
translationY drives dynamic height, opacity, and visibility changes for the player views.
Platform-Specific Handling:
On iOS, Animated.ScrollView directly wraps the player content.
On Android, an additional ScrollView layer is used for nested scrolling.
This design provides a fluid, interactive media player experience, seamlessly integrating gesture and animation handling across platforms.